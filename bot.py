import typing

import aiogram
import aiohttp
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from db.storage import UserStorage, User, OrderStorage, Order
import aiofiles
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)


from config import Config


class GetUserInfo(StatesGroup):
    client_name = State()
    phone = State()
    address = State()


class GetProductInfo(StatesGroup):
    link = State()
    size = State()
    price = State()


class GetOrderSendingConfirm(StatesGroup):
    answer = State()


class TG_Bot:
    def __init__(self, user_storage: UserStorage, order_storage: OrderStorage):
        self._user_storage: UserStorage = user_storage
        self._order_storage: OrderStorage = order_storage
        self._bot: aiogram.Bot = aiogram.Bot(token=Config.TGBOT_API_KEY)
        self._storage: MemoryStorage = MemoryStorage()
        self._dispatcher: aiogram.Dispatcher = aiogram.Dispatcher(
            self._bot, storage=self._storage
        )
        self._yuan_rate = None
        self._photo = None
        self._create_keyboards()

    async def init(self):
        await self._get_last_rate()
        scheduler = AsyncIOScheduler()
        scheduler.add_job(self._get_last_rate, "interval", minutes=1)
        scheduler.start()
        self._init_handler()

    async def start(self):
        print("Bot has started")
        await self._dispatcher.start_polling()

    async def _get_last_rate(self):
        rate = None
        while not rate:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    "https://www.cbr-xml-daily.ru/latest.js"
                ) as response:
                    if response.status == 200:
                        data = await response.json(
                            content_type="application/javascript"
                        )
                        rate = 1 / data["rates"]["CNY"]
            await asyncio.sleep(5)
        self._yuan_rate = rate

    async def _show_menu(self, message: aiogram.types.Message):
        if not self._photo:
            photo = aiogram.types.InputFile("logo.jpg")
        else:
            photo = self._photo
        sent_message = await message.answer_photo(
            photo,
            caption="–ú–µ–Ω—é <a href='https://t.me/marequstore'>MAREQU Store</a>",
            parse_mode="HTML",
            reply_markup=self._inline_menu_keyboard,
            # disable_web_page_preview=True,
        )
        self._photo = sent_message.photo[0].file_id

    async def _referal_system(self, call: aiogram.types.CallbackQuery):
        user = await self._user_storage.get_by_id(call.message.chat.id)
        withdraw_keyboard = InlineKeyboardMarkup().row(
            InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏", callback_data=f"withdraw {user.id}")
        )
        await call.message.answer(
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user.balance} ‚ÇΩ</b>\n\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 20% –æ—Ç –ø—Ä–∏–±—ã–ª–∏!\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\nhttps://t.me/marequbot?start={user.id}",
            parse_mode="HTML",
            reply_markup=withdraw_keyboard,
        )

    async def _withdraw_balance(self, call: aiogram.types.CallbackQuery):
        user_id = int(call.data.split()[1])
        user = await self._user_storage.get_by_id(user_id)
        if user and user.balance > 1000:
            await call.message.answer("–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.")
        else:
            await call.message.answer("–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç 1000 ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")

    async def _show_cart(self, call: aiogram.types.CallbackQuery):
        user_orders = await self._order_storage.get_orders_by_user_id(
            call.message.chat.id
        )
        if user_orders:
            await call.message.answer(
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞–±—ã–ª–∏ –ª–∏ –í—ã –Ω–∏—á–µ–≥–æ ü§î\nüõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:",
                reply_markup=self._inline_cart_keyboard,
            )
            for order in user_orders:
                delete_keyboard = InlineKeyboardMarkup().row(
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_order {order.id}"
                    )
                )
                await call.message.answer(
                    order.custom_str(self._yuan_rate),
                    reply_markup=delete_keyboard,
                )
        else:
            await call.message.answer("–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")

    async def _delete_product(self, call: aiogram.types.CallbackQuery):
        order_id = int(call.data.split()[1])
        await self._order_storage.delete(order_id)
        await call.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä")
        await call.message.edit_text(
            "<strike>" + call.message.text + "</strike>", parse_mode="HTML"
        )

    async def _send_order(self, call: aiogram.types.CallbackQuery):
        user = await self._user_storage.get_by_id(call.message.chat.id)
        if user and user.full_name:
            user_orders = await self._order_storage.get_orders_by_user_id(
                call.message.chat.id
            )
            if user_orders:
                await call.message.answer(
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã üòä\nüõí –í–∞—à –∑–∞–∫–∞–∑:",
                    reply_markup=self._order_sending_keyboard,
                )
                for order in user_orders:
                    await call.message.answer(order.custom_str(self._yuan_rate))
                await GetOrderSendingConfirm.answer.set()
            else:
                await call.message.answer(
                    "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ - –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —É –≤–∞—Å –±—ã–ª–æ —á—Ç–æ-—Ç–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ. –°–µ–π—á–∞—Å —Ç–∞–º –ø—É—Å—Ç–æ."
                )
        else:
            await call.message.answer(
                "–°–µ–π—á–∞—Å –í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ—ç—Ç–æ–º—É –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                parse_mode="HTML",
                reply_markup=self._inline_reg_keyboard,
                # disable_web_page_preview=True,
            )

    async def _process_order_sending_answer(
        self, message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext
    ):
        user = await self._user_storage.get_by_id(message.from_user.id)
        if message.text.strip() == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
            await self._bot.send_message(
                917865313,
                # 5546230210,
                f"""‚ùóÔ∏è–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞‚ùóÔ∏è\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={user.id}">{user.full_name}</a>\nC id: {user.id}\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone}\n\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user.address}""",
                parse_mode="HTML",
            )
            user_orders = await self._order_storage.get_orders_by_user_id(
                message.from_user.id
            )
            await self._bot.send_chat_action(
                chat_id=message.from_user.id, action=aiogram.types.ChatActions.TYPING
            )
            total_price_yuan = 0
            total_price_rub = 0
            for order in user_orders:
                rub_price = round(1.05 * 1.05 * order.price * self._yuan_rate + 1000)
                give_bonuses_keyboard = None
                if user.inviter_id:
                    bonus_from_order = round(
                        1.05 * 0.05 * order.price * self._yuan_rate * 0.2
                    )
                    give_bonuses_keyboard = InlineKeyboardMarkup().row(
                        InlineKeyboardButton(
                            "–í—ã–¥–∞—Ç—å –±–æ–Ω—É—Å—ã",
                            callback_data=f"give_bonus {user.inviter_id} {bonus_from_order}",
                        )
                    )
                await self._bot.send_message(
                    917865313,
                    # 5546230210,
                    order.custom_str(self._yuan_rate),
                    reply_markup=give_bonuses_keyboard,
                )
                total_price_yuan += order.price
                total_price_rub += rub_price
                await self._order_storage.delete(order.id)

            total_profit = round(1.05 * 0.05 * total_price_yuan * self._yuan_rate)
            await self._bot.send_message(
                917865313,
                # 5546230210,
                f"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –≤ —Ä—É–±–ª—è—Ö: {total_price_rub} ‚ÇΩ\n–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞–∫–∞–∑–∞ –≤ —Ä—É–±–ª—è—Ö: {total_profit} ‚ÇΩ",
            )
            await message.answer(
                f"–û–ø–µ—Ä–∞—Ç–æ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º –∏ —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ ‚ù§Ô∏è\n\nüí∞–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {total_price_rub} —Ä—É–± —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ú–æ—Å–∫–≤–µ.\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞ –°–î–≠–ö–æ–º –æ—Ç —Å–∫–ª–∞–¥–∞ –≤ –ú–æ—Å–∫–≤–µ –ø–æ –†–æ—Å—Å–∏–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ",
                reply_markup=self._menu_keyboard_user,
            )
            await state.finish()
        elif message.text.strip() == "–ù–∞–∑–∞–¥":
            await state.finish()
            await self._show_menu(message=message)
        else:
            await message.answer(
                "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞", reply_markup=self._order_sending_keyboard
            )

    async def _give_bonus(self, call: aiogram.types.CallbackQuery):
        user_id, bonus = list(map(int, call.data.split()[1:]))
        await call.message.edit_reply_markup()
        await self._user_storage.give_bonus(user_id, bonus)
        await call.message.answer(
            f"–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a> {bonus} –±–æ–Ω—É—Å–æ–≤",
            parse_mode="HTML",
        )
        await self._bot.send_message(
            user_id,
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º üéâ \n–í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus} –±–æ–Ω—É—Å–æ–≤ –∑–∞ –∑–∞–∫–∞–∑ –¥—Ä—É–≥–∞ ü§ù\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–≤–µ—Ç—É–µ—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –¥—Ä—É–∑—å—è–º ‚ù§Ô∏è\n1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å—ã —É –Ω–∞—Å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –Ω–∞ —Å–≤–æ—é –∫–∞—Ä—Ç—É üôÇ\n\n( –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É )",
        )

    async def _ask_order_type(self, call: aiogram.types.CallbackQuery):
        await call.message.answer(
            "üëÄ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=self._order_type_keyboard,
        )

    async def _start_user_registration(self, call: aiogram.types.CallbackQuery):
        await call.message.answer(
            "–î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ(–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏)\n\n1/3 –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:\n\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª",
            # reply_markup=self._cancel_keyboard,
        )
        await GetUserInfo.client_name.set()

    async def _ask_product_name(self, call: aiogram.types.CallbackQuery):
        product_type = call.data.split()[1]
        await GetProductInfo.link.set()
        state = self._dispatcher.get_current().current_state()
        await state.update_data(product_type=product_type)
        levels = "3"
        if product_type in ("onesize", "tech"):
            levels = "2"
        await state.update_data(levels=levels)
        async with aiofiles.open("link.jpg", "rb") as link_pic:
            await call.message.answer_photo(
                link_pic,
                f"<a href='https://telegra.ph/Kak-skachat-Poison-i-najti-tam-tovar-10-27'>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä?</a> - —Å—Å—ã–ª–∫–∞\n1/{levels} –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:",
                # reply_markup=self._cancel_keyboard,
                parse_mode="HTML",
            )

    async def _process_product_name(
        self, message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext
    ):
        state_data = await state.get_data()
        await state.update_data(product_link=message.text.strip())
        if state_data["product_type"] in ("onesize", "tech"):
            async with aiofiles.open("pic.jpg", "rb") as picture:
                await message.answer_photo(
                    picture,
                    f"2/{state_data['levels']} –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (–∑–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞):",
                    # reply_markup=self._cancel_keyboard,
                )
            await GetProductInfo.price.set()
        else:
            await message.answer(
                f"2/{state_data['levels']} –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä:",
                # reply_markup=self._cancel_keyboard,
            )
            await GetProductInfo.size.set()

    async def _process_product_size(
        self, message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext
    ):
        state_data = await state.get_data()
        await state.update_data(product_size=message.text.strip())
        async with aiofiles.open("pic.jpg", "rb") as picture:
            await message.answer_photo(
                picture,
                f"3/{state_data['levels']} –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (–∑–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞):",
                # reply_markup=self._cancel_keyboard,
            )
        await GetProductInfo.price.set()

    async def _process_product_price(
        self, message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext
    ):
        if message.text.strip().isdigit():
            state_data = await state.get_data()
            product_price = int(message.text.strip())
            product_size = state_data.get("product_size", "one size")
            order = Order(
                buyer_id=message.from_user.id,
                link=state_data["product_link"],
                size=product_size,
                price=product_price,
            )
            await self._order_storage.create(order)
            await message.answer(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É:",
                reply_markup=self._inline_menu_keyboard,
            )
            await message.answer(order.custom_str(self._yuan_rate))
            await state.finish()
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ —é–∞–Ω–µ–π(—Ü–∏—Ñ—Ä–∞–º–∏):")

    async def _process_client_name(
        self, message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext
    ):
        if message.text.strip() == "-":
            await message.answer(
                "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–æ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."
            )
            await state.finish()
            await self._show_menu(message)
        else:
            await state.update_data(client_name=message.text.strip())
            await message.answer(
                "2/3 –í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                # reply_markup=self._cancel_keyboard,
            )
            await GetUserInfo.phone.set()

    async def _process_client_phone(
        self, message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext
    ):
        await state.update_data(client_phone=message.text.strip())
        await message.answer(
            "3/3 –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            # reply_markup=self._cancel_keyboard,
        )
        await GetUserInfo.address.set()

    async def _process_client_address(
        self, message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext
    ):
        state_data = await state.get_data()
        db_user = await self._user_storage.get_by_id(message.from_user.id)
        db_user.full_name = state_data["client_name"]
        db_user.phone = state_data["client_phone"]
        db_user.address = message.text.strip()
        await state.finish()
        await self._user_storage.update(db_user)
        await message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã.",
            reply_markup=self._inline_menu_keyboard,
        )

    async def _cancel_handler(
        self, call: aiogram.types.CallbackQuery, state: aiogram.dispatcher.FSMContext
    ):
        current_state = await state.get_state()
        if current_state is not None:
            await state.finish()
        await self._bot.edit_message_reply_markup(
            call.message.chat.id, call.message.message_id
        )
        await self._show_menu(call.message)

    def _init_handler(self):
        self._dispatcher.register_message_handler(
            self._user_middleware(self._show_menu),
            text="–ú–µ–Ω—é",
        )
        self._dispatcher.register_message_handler(
            self._user_middleware(self._show_menu),
            commands=["start", "menu"],
        )
        self._dispatcher.register_callback_query_handler(
            self._start_user_registration,
            aiogram.dispatcher.filters.Text(startswith="registration"),
            state="*",
        )
        self._dispatcher.register_callback_query_handler(
            self._ask_order_type,
            aiogram.dispatcher.filters.Text(startswith="add_product"),
            state="*",
        )
        self._dispatcher.register_callback_query_handler(
            self._show_cart,
            aiogram.dispatcher.filters.Text(startswith="cart"),
            state="*",
        )
        self._dispatcher.register_callback_query_handler(
            self._delete_product,
            aiogram.dispatcher.filters.Text(startswith="delete_order"),
        )
        self._dispatcher.register_callback_query_handler(
            self._send_order,
            aiogram.dispatcher.filters.Text(startswith="send_order"),
            state="*",
        )
        self._dispatcher.register_message_handler(
            self._process_order_sending_answer, state=GetOrderSendingConfirm.answer
        )

        self._dispatcher.register_callback_query_handler(
            self._ask_product_name,
            aiogram.dispatcher.filters.Text(startswith="type"),
            state="*",
        )
        self._dispatcher.register_callback_query_handler(
            self._cancel_handler,
            aiogram.dispatcher.filters.Text(startswith="cancel"),
            state="*",
        )
        self._dispatcher.register_callback_query_handler(
            self._withdraw_balance,
            aiogram.dispatcher.filters.Text(startswith="withdraw"),
            state="*",
        )
        self._dispatcher.register_callback_query_handler(
            self._give_bonus,
            aiogram.dispatcher.filters.Text(startswith="give_bonus"),
            state="*",
        )
        self._dispatcher.register_callback_query_handler(
            self._referal_system,
            aiogram.dispatcher.filters.Text(startswith="referal_system"),
            state="*",
        )

        self._dispatcher.register_message_handler(
            self._process_product_name, state=GetProductInfo.link
        )
        self._dispatcher.register_message_handler(
            self._process_product_size, state=GetProductInfo.size
        )
        self._dispatcher.register_message_handler(
            self._process_product_price, state=GetProductInfo.price
        )
        self._dispatcher.register_message_handler(
            self._process_client_name, state=GetUserInfo.client_name
        )
        self._dispatcher.register_message_handler(
            self._process_client_phone, state=GetUserInfo.phone
        )
        self._dispatcher.register_message_handler(
            self._process_client_address, state=GetUserInfo.address
        )

    def _user_middleware(self, func: typing.Callable) -> typing.Callable:
        async def wrapper(message: aiogram.types.Message, *args, **kwargs):
            user = await self._user_storage.get_by_id(message.chat.id)
            if user is None:
                split_message = message.text.split()
                if (
                    len(split_message) == 2
                    and split_message[1].isdigit()
                    and await self._user_storage.get_by_id(int(split_message[1]))
                ):
                    inviter_id = int(split_message[1])
                    await self._bot.send_message(
                        chat_id=inviter_id, text="‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞."
                    )
                    user = User(
                        id=message.chat.id, role=User.USER, inviter_id=inviter_id
                    )
                    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è")
                else:
                    user = User(id=message.chat.id, role=User.USER)
                await message.answer(
                    "–°–µ–π—á–∞—Å –í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ—ç—Ç–æ–º—É –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    parse_mode="HTML",
                    reply_markup=self._inline_reg_keyboard,
                    # disable_web_page_preview=True,
                )
                await self._user_storage.create(user)
            if user.role != User.BLOCKED:
                await func(message)

        return wrapper

    def _admin_required(self, func: typing.Callable) -> typing.Callable:
        async def wrapper(message: aiogram.types.Message, user: User, *args, **kwargs):
            if user.role == User.ADMIN:
                await func(message, user)

        return wrapper

    def _create_keyboards(self):
        self._menu_keyboard_user = ReplyKeyboardMarkup(resize_keyboard=True).row(
            KeyboardButton("–ú–µ–Ω—é")
        )

        self._order_sending_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row(
            KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"), KeyboardButton("–ù–∞–∑–∞–¥")
        )

        self._inline_cart_keyboard = (
            InlineKeyboardMarkup()
            .row(InlineKeyboardButton("üòé –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"))
            .row(InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="send_order"))
            .row(
                InlineKeyboardButton(
                    "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/clover4th"
                )
            )
        )

        self._inline_menu_keyboard = (
            InlineKeyboardMarkup()
            .row(InlineKeyboardButton("üòé –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"))
            .row(InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"))
            .row(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="send_order")
            )
            .row(
                InlineKeyboardButton(
                    "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/clover4th"
                )
            )
            .row(
                InlineKeyboardButton(
                    "üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referal_system"
                )
            )
        )

        self._inline_reg_keyboard = (
            InlineKeyboardMarkup()
            .row(
                InlineKeyboardButton("–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="registration")
            )
            .row(
                InlineKeyboardButton(
                    "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/clover4th"
                )
            )
        )

        self._order_type_keyboard = (
            InlineKeyboardMarkup()
            .row(
                InlineKeyboardButton(
                    text="üëü –õ–µ—Ç–Ω—è—è –æ–±—É–≤—å ", callback_data="type sneakers"
                )
            )
            .row(
                InlineKeyboardButton(text="ü•æ –ó–∏–º–Ω—è—è –æ–±—É–≤—å", callback_data="type boots")
            )
            .row(
                InlineKeyboardButton(
                    text="üëï –ú–∞–π–∫–∏ / –†—É–±–∞—à–∫–∏ / –¢–æ–ª—Å—Ç–æ–≤–∫–∏", callback_data="type top"
                )
            )
            .row(
                InlineKeyboardButton(
                    text="üëñ –®—Ç–∞–Ω—ã / –î–∂–∏–Ω—Å—ã / –ë—Ä—é–∫–∏", callback_data="type bottom"
                )
            )
            .row(
                InlineKeyboardButton(
                    text="¬´üß• –ö—É—Ä—Ç–∫–∏ / –í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞¬ª", callback_data="type jacket"
                )
            )
            .row(InlineKeyboardButton(text="üíª –¢–µ—Ö–Ω–∏–∫–∞", callback_data="type tech"))
            .row(
                InlineKeyboardButton(
                    text="üëú –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã / –°—É–º–∫–∏ / –†—é–∫–∑–∞–∫–∏", callback_data="type onesize"
                )
            )
        )
        # self._cancel_keyboard = InlineKeyboardMarkup().row(
        #     InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
        # )
